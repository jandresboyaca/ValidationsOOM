apiVersion: v1
kind: Namespace
metadata:
  name: heap-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  namespace: heap-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
    spec:
      containers:
        - name: app
          image: demo-heap-monitor-app:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 8080
          env:
            - name: JAVA_TOOL_OPTIONS
              value: >-
                -XX:+UseContainerSupport

          resources:
            limits:
              memory: "301Mi"
              cpu: "500m"
            requests:
              memory: "301Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app
  namespace: heap-test
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/port: "8080"
spec:
  selector:
    app: demo-app
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: heap-test
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'spring'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['demo-app:8080']
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter.kube-system.svc.cluster.local:9100']
      - job_name: 'cadvisor'
        static_configs:
          - targets: ['cadvisor.heap-test.svc.cluster.local:8080']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: heap-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.51.1
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: heap-test
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: heap-test
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
  dashboard.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        type: file
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: heap-test
data:
  jvm_memory.json: |
    {
      "id": null,
      "title": "JVM Memory Overview",
      "schemaVersion": 27,
      "version": 1,
      "panels": [
        {
          "type": "timeseries",
          "title": "Heap Used vs Container RAM",
          "targets": [
            { "expr": "jvm_memory_used_bytes{area=\"heap\"}", "legendFormat": "heap_used" },
            { "expr": "jvm_memory_committed_bytes{area=\"heap\"}", "legendFormat": "heap_committed" },
            { "expr": "container_memory_working_set_bytes{container=\"app\"}", "legendFormat": "working_set" }
          ]
        }
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: heap-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.2
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: datasource-config
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: dashboard-provider
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
              readOnly: true
      volumes:
        - name: datasource-config
          configMap:
            name: grafana-provisioning
            items:
              - key: datasource.yml
                path: datasource.yml
        - name: dashboard-provider
          configMap:
            name: grafana-provisioning
            items:
              - key: dashboard.yml
                path: dashboard.yml
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: heap-test
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30300
  type: NodePort